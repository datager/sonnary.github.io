<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unix programing</title>
      <link href="2021/02/16/unix-bian-cheng/"/>
      <url>2021/02/16/unix-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><ol><li>弃用root用户</li><li>重构老代码</li><li>书要看, 习题代码要敲</li></ol><p>内容</p><ol><li>IO<ol><li>3 5 14</li></ol></li><li>文件系统 <ol><li>4 6 7</li></ol></li><li>进程  <ol><li>信号10</li><li>多线程10, 11</li></ol></li><li>进程间通信<ol><li>进程基础+多进程8</li><li>守护进程13</li><li>15, 16</li></ol></li></ol><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><p>C: <a href="https://www.bilibili.com/video/BV18p4y167Md">https://www.bilibili.com/video/BV18p4y167Md</a></p><p>APUE笔记: <a href="https://www.cnblogs.com/0xcafebabe/tag/APUE/">https://www.cnblogs.com/0xcafebabe/tag/APUE/</a></p><p>man手册: vim下用shift+k可跳转到man手册</p><h1 id="标准IO"><a href="#标准IO" class="headerlink" title="标准IO"></a>标准IO</h1><p>I/O: 落盘是一切实现的基础, 分为2种</p><ul><li><p>stdio: 标准IO</p></li><li><p>sysIO: 系统IO(文件IO)</p></li></ul><p>优先用标准IO</p><p>标准是一组接口: </p><ul><li>移植性好, linux sysIO/win sysIO 都会实现该接口, 例如fopen是标准IO, linux是open的实现, win是openfile的实现</li><li>合并系统调用: 加速</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">stdio<span class="token operator">:</span> FILE类型贯穿始终<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"tmp"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        fprintf(stderr, "open failed! errno: %d\n", errno);</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"fopen(): %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Fopen() 创建的FILE是在堆上(一般有fopen_fclose, malloc-free这种逆操作的都是分配在堆上的)</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mode<span class="token punctuation">)</span><span class="token punctuation">{</span>  FILE <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  tm <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tmp<span class="token operator">-&gt;</span>xx<span class="token operator">=</span>xx<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>不可能放在栈是因为<span class="token punctuation">,</span> <span class="token keyword">if</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>函数内局部变量<span class="token punctuation">)</span><span class="token punctuation">,</span> 函数结束后变量就销毁了<span class="token punctuation">.</span>不可能放在静态区<span class="token punctuation">,</span> 静态区只会有<span class="token number">1</span>份<span class="token punctuation">,</span> 是因为该函数若被调用N次<span class="token punctuation">,</span> 第<span class="token number">2</span><span class="token operator">+</span>次之后会覆盖第上一次打开的FILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fclose和文件权限"><a href="#fclose和文件权限" class="headerlink" title="fclose和文件权限"></a>fclose和文件权限</h2><p>一个进程最多打开几个文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"tmp"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count = %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./p5-fopenfopen<span class="token punctuation">(</span><span class="token punctuation">)</span>: Too many <span class="token function">open</span> filescount <span class="token operator">=</span> <span class="token number">253</span>用ulimit -a可看到上限256, 再加上stdin, stdout, stderr这3个, 总共253+3<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">;</span> ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token builtin class-name">ulimit</span> -a-t: cpu <span class="token function">time</span> <span class="token punctuation">(</span>seconds<span class="token punctuation">)</span>              unlimited-f: <span class="token function">file</span> size <span class="token punctuation">(</span>blocks<span class="token punctuation">)</span>              unlimited-d: data seg size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>          unlimited-s: stack size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>             <span class="token number">8192</span>-c: core <span class="token function">file</span> size <span class="token punctuation">(</span>blocks<span class="token punctuation">)</span>         <span class="token number">0</span>-v: address space <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>          unlimited-l: locked-in-memory size <span class="token punctuation">(</span>kbytes<span class="token punctuation">)</span>  unlimited-u: processes                       <span class="token number">709</span>-n: <span class="token function">file</span> descriptors                <span class="token number">256</span><span class="token function">vim</span> /etc/security/limits.conf 改soft nofile和hard nofile上限值<span class="token punctuation">(</span>单进程级, reboot生效, <span class="token builtin class-name">ulimit</span> -n当终端退出后则失效<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">vim</span> /etc/sysctl.conf 修改fs.file-max值<span class="token punctuation">(</span>系统级, reboot生效<span class="token punctuation">)</span>https://www.mdeditor.tw/pl/pFylhttp://www.3mu.me/linux%E4%BF%AE%E6%94%B9open-files%E6%95%B0%E5%8F%8Aulimit%E5%92%8Cfile-max%E7%9A%84%E5%8C%BA%E5%88%AB/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>umask</p><p>新创建的文件的chmod默认是0666 &amp; ~umask()</p><p>例如: umask为0022, 新创建的文件就是0666-0022=0644</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># umask</span>0022root@k8s-wolf-minion-47:~<span class="token comment"># touch 123</span>root@k8s-wolf-minion-47:~<span class="token comment"># ll | grep 123</span>-rw-r--r--  <span class="token number">1</span> root root   <span class="token number">27069</span> Feb <span class="token number">18</span> <span class="token number">23</span>:23 <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fputc和pgetc"><a href="#fputc和pgetc" class="headerlink" title="fputc和pgetc"></a>fputc和pgetc</h2><ul><li>copy命令</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fps <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fpd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> put_ret_code<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: %s &lt;src_file_name&gt;, &lt;dst_file_name&gt; need 2 arguments"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fps <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fps <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fpd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fpd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        put_ret_code <span class="token operator">=</span> <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fpd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>put_ret_code <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./p8-fgetc /etc/services /tmp/out ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">diff</span> /etc/services /tmp/out 是相同的, 模拟了linux的cp命令  边界条件 ✘  ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">make</span> p8-fgetc <span class="token operator">&amp;&amp;</span> ./p8-fgetccc     p8-fgetc.c   -o p8-fgetcUsage: ./p8-fgetc, need <span class="token number">2</span> arguments%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>计算文件的字节数命令</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: need 1 arg\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"count: %ld\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">drwxr-xr-x   <span class="token number">9</span> sunyuchuan  staff   <span class="token number">288</span>  <span class="token number">2</span> <span class="token number">19</span> 00:20 <span class="token builtin class-name">.</span>drwxr-xr-x  <span class="token number">27</span> sunyuchuan  staff   <span class="token number">864</span>  <span class="token number">2</span> <span class="token number">19</span> 00:15 <span class="token punctuation">..</span>-rwxr-xr-x   <span class="token number">1</span> sunyuchuan  staff  <span class="token number">8568</span>  <span class="token number">2</span> <span class="token number">18</span> <span class="token number">22</span>:56 p5-fopen-rw-r--r--   <span class="token number">1</span> sunyuchuan  staff   <span class="token number">347</span>  <span class="token number">2</span> <span class="token number">18</span> <span class="token number">22</span>:55 p5-fopen.c-rwxr-xr-x   <span class="token number">1</span> sunyuchuan  staff  <span class="token number">8756</span>  <span class="token number">2</span> <span class="token number">18</span> <span class="token number">23</span>:53 p8-fgetc-rw-r--r--   <span class="token number">1</span> sunyuchuan  staff   <span class="token number">764</span>  <span class="token number">2</span> <span class="token number">18</span> <span class="token number">23</span>:55 p8-fgetc.c-rwxr-xr-x   <span class="token number">1</span> sunyuchuan  staff  <span class="token number">8760</span>  <span class="token number">2</span> <span class="token number">19</span> 00:20 p8-fgetccount-rw-r--r--   <span class="token number">1</span> sunyuchuan  staff   <span class="token number">428</span>  <span class="token number">2</span> <span class="token number">19</span> 00:20 p8-fgetccount.c-rw-r--r--   <span class="token number">1</span> sunyuchuan  staff     <span class="token number">0</span>  <span class="token number">2</span> <span class="token number">18</span> <span class="token number">22</span>:42 tmp~/go/src/github.com/sonnary/apue/y   master ●✚  ./p8-fgetccount p8-fgetcUsage: need <span class="token number">1</span> arg✘  ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">make</span> p8-fgetccountcc     p8-fgetccount.c   -o p8-fgetccount~/go/src/github.com/sonnary/apue/y   master ●✚  ./p8-fgetccount p8-fgetccount: <span class="token number">8756</span>~/go/src/github.com/sonnary/apue/y   master ●✚  ./p8-fgetccount p8-fgetccount.ccount: <span class="token number">428</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fputs-fgets"><a href="#fputs-fgets" class="headerlink" title="fputs fgets"></a>fputs fgets</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">BUFSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fps <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fpd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: %s &lt;src_file_name&gt;, &lt;dst_file_name&gt; need 2 arguments"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fps <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fps <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fpd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fpd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">,</span> fps<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> fpd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fread-fwrite"><a href="#fread-fwrite" class="headerlink" title="fread fwrite"></a>fread fwrite</h2><ul><li>要注意 这一对儿函数用的时候要把块大小设置为1<ul><li>因为其行为为返回实际操作的块个数, 所以无法区分, 一般最佳实践为块大小设置为1<ul><li>eg: 如果1个块1有10Bytes, 但拿到了0Bytes, 返回值为0</li><li>eg: 如果1个块1有10Bytes, 但拿到了5Bytes, 返回值为0</li><li>eg: 如果1个块1有10Bytes, 但拿到了10Bytes, 返回值为1</li></ul></li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">BUFSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fps <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fpd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: %s &lt;src_file_name&gt;, &lt;dst_file_name&gt; need 2 arguments"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fps <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fps <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fpd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fpd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">,</span> fps<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> fpd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fpd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="atoi和sprintf"><a href="#atoi和sprintf" class="headerlink" title="atoi和sprintf"></a>atoi和sprintf</h2><p>是逆操作</p><h2 id="fseeko和ftello"><a href="#fseeko和ftello" class="headerlink" title="fseeko和ftello"></a>fseeko和ftello</h2><p>C99(为了移植)支持fseek和ftell, 因为返回的是long类型, 且只能用正数部分, 所以为0.5*2^32=2G大小, 不够文件大小用</p><p>方言(不考虑移植)推荐用fsseko和ftello, 其返回为off_t, 一般在编译时用<code>gcc a.c -o a -D_FILE_OFFSET_BITS=64</code>定义</p><h2 id="文件位置函数"><a href="#文件位置函数" class="headerlink" title="文件位置函数"></a>文件位置函数</h2><p>fseek, ftell, rewind </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: need 1 arg\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> seek_success <span class="token operator">=</span> <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>seek_success <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"seek fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">ls</span> -l flen.c-rw-r--r--  <span class="token number">1</span> sunyuchuan  staff  <span class="token number">467</span>  <span class="token number">2</span> <span class="token number">19</span> <span class="token number">10</span>:05 flen.c ~/go/src/github.com/sonnary/apue/y   master ●✚  ./flen flen.c<span class="token number">467</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fseek可用于SEEK_END, 如迅雷下载, 把文件抻开成很大的大小(eg: 2GB), 然后分段用多线程下载</li><li>rewind就是fseek(fp, 0, SEEK_SET)的封装, seek到文件头</li></ul><h2 id="缓冲区fflush"><a href="#缓冲区fflush" class="headerlink" title="缓冲区fflush"></a>缓冲区fflush</h2><p>printf默认是行缓冲, 所以一般加<code>fprintf("xxx %d\n", xxx);</code></p><p>缓冲区大多是好事, 用于合并系统调用</p><ul><li>全缓冲: 满了强制刷 (用于非终端设备)</li><li>行缓冲: 换行or满了时刷新, (用于终端设备(如stdout等))</li><li>无缓冲: stderr</li></ul><h2 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h2><p>在makefile中写#define</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">CFLAGS<span class="token operator">+=</span>-D_FILE_OFFSET_BITS<span class="token operator">=</span>64 -D_GNU_SOURCE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于在c文件开头写define, 会更易读</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getline</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">char</span> <span class="token operator">*</span>linebuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token class-name">size_t</span> linesize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>linebuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>linesize<span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lu\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>linebuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./getline makefile<span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="系统IO"><a href="#系统IO" class="headerlink" title="系统IO"></a>系统IO</h1><p>open, close, read, write, lseek</p><p>文件描述符是整数(数组下标), 优先返回可用的最小的fd</p><p>每个进程有个文件描述符数组(size为ulimit -n的长度), 数组下标为文件描述符, 值为FILE结构体指针, FILE结构体指向了文件inode</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">        thread <span class="token number">1</span>     +-------------+            +-------------+     +-------+fd1  +val: <span class="token operator">&amp;</span>FILE1  +------------<span class="token operator">&gt;</span>             +-----<span class="token operator">&gt;</span> inode1<span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>            <span class="token operator">|</span>   FILE1     <span class="token operator">|</span>     +-------+     +-------------+            +-------------+     +-------+fd2  +val: <span class="token operator">&amp;</span>FILE2  <span class="token operator">|</span>            <span class="token operator">|</span>             +----<span class="token operator">&gt;</span>+ inode2<span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>            <span class="token operator">|</span>   FILE2     <span class="token operator">|</span>     +-------+     +-------------+            +-------------+     <span class="token operator">|</span>             <span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>     +-------------+     <span class="token operator">|</span>    <span class="token punctuation">..</span>.      <span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>     +-------------+        thread <span class="token number">2</span>     +-------------+            +-------------+     +-------+fd1  +val: <span class="token operator">&amp;</span>FILE1  +------------<span class="token operator">&gt;</span>             +-----<span class="token operator">&gt;</span> inode1<span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>            <span class="token operator">|</span>   FILE1     <span class="token operator">|</span>     +-------+     +-------------+            +-------------+     +-------+fd2  +val: <span class="token operator">&amp;</span>FILE2  <span class="token operator">|</span>            <span class="token operator">|</span>             +----<span class="token operator">&gt;</span>+ inode2<span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>            <span class="token operator">|</span>   FILE2     <span class="token operator">|</span>     +-------+     +-------------+            +-------------+     <span class="token operator">|</span>             <span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>     +-------------+     <span class="token operator">|</span>    <span class="token punctuation">..</span>.      <span class="token operator">|</span>     <span class="token operator">|</span>             <span class="token operator">|</span>     +-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>man 2 open, C没有重载, 所以C是用变参函数实现的, (若传入的参数个数不符, C中的fprintf(“%d %d”, a,b,c)不会报错, 而C++重载是固定参数的则会报错)</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="read-write"><a href="#read-write" class="headerlink" title="read write"></a>read write</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">BUFSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> sfd<span class="token punctuation">,</span> dfd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: 3 args..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    sfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    dfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span><span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> readed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> writted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    readed <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readed <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"all readed done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> towrite <span class="token operator">=</span> readed<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>towrite <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      writted <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>dfd<span class="token punctuation">,</span> buf <span class="token operator">+</span> pos<span class="token punctuation">,</span> towrite<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>writted <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            towrite <span class="token operator">-=</span> writted<span class="token punctuation">;</span>      pos <span class="token operator">+=</span> writted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>dfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准IO: 引入缓冲区, 可以合并系统调用, 增大吞吐量</p><p>标准IO和文件IO不可混用, 因为有缓冲区的区别, 所以pos是不同的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># make write</span>cc     write.c   -o <span class="token function">write</span>root@k8s-wolf-minion-47:~<span class="token comment"># ./write</span>bbbaaa<span class="token function">strace</span> ./write 跟踪系统调用write<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">"b"</span>, 1b<span class="token punctuation">)</span>                        <span class="token operator">=</span> <span class="token number">1</span>write<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">"b"</span>, 1b<span class="token punctuation">)</span>                        <span class="token operator">=</span> <span class="token number">1</span>write<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">"b"</span>, 1b<span class="token punctuation">)</span>                        <span class="token operator">=</span> <span class="token number">1</span>write<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">"aaa"</span>, 3aaa<span class="token punctuation">)</span>                      <span class="token operator">=</span> <span class="token number">3</span>exit_group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                           <span class="token operator">=</span> ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h1><p>dup() dup2()</p><ul><li>输出从stdout重定向到文件</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TMP_FILE</span> <span class="token string">"/tmp/out"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>TMP_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token operator">|</span>O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/go/src/github.com/sonnary/apue/y   master ●✚  ./dup~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">cat</span> /tmp/outhello<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>dup: 复制一个最小的fd, 使原fd和新fd都指向同一个FILE, 该FILE指向inode(注意FILE内使用fd引用计数器的)</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TMP_FILE</span> <span class="token string">"/tmp/out"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>TMP_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token operator">|</span>O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">rm</span> /tmp/out ~/go/src/github.com/sonnary/apue/y   master ●✚  ./dup1 ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">cat</span> /tmp/outhello<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dup2是原子操作</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TMP_FILE</span> <span class="token string">"/tmp/out"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>TMP_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token operator">|</span>O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./dup2 ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">cat</span> /tmp/outhello<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="fcntl-管理文件描述符"><a href="#fcntl-管理文件描述符" class="headerlink" title="fcntl 管理文件描述符"></a>fcntl 管理文件描述符</h2><p>Ioctl 设备相关的内容</p><p>/dev/fd/目录: 畜牧路, 显示的是当前进程的目录描述符信息</p><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><ul><li>stat: 通过文件路径获取属性, 面对符号链接文件是获取的是所指向文件的属性</li><li>fstat: 通过文件描述符获取属性</li><li>lstat: 面对符号链接文件是获取的是符号链接文阿基内的属性</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token class-name">off_t</span> <span class="token function">flen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">stat</span> data<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">flen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ll flen2.c-rw-r--r--  <span class="token number">1</span> sunyuchuan  staff   406B  <span class="token number">2</span> <span class="token number">19</span> <span class="token number">17</span>:23 flen2.c ~/go/src/github.com/sonnary/apue/y   master ●✚  ./flen2 flen2.c<span class="token number">406</span> ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token function">stat</span> flen2.c<span class="token number">16777220</span> <span class="token number">105969084</span> -rw-r--r-- <span class="token number">1</span> sunyuchuan staff <span class="token number">0</span> <span class="token number">406</span> <span class="token string">"Feb 19 17:23:40 2021"</span> <span class="token string">"Feb 19 17:23:34 2021"</span> <span class="token string">"Feb 19 17:23:34 2021"</span> <span class="token string">"Feb 19 17:23:34 2021"</span> <span class="token number">4096</span> <span class="token number">8</span> <span class="token number">0</span> flen2.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件真正占用磁盘容量是Blocks * BytesPerBlock(一般为512Bytes), 而不是file的size</li><li>linux的<code>cp</code>命令支持空洞文件拷贝, 如果src文件里read出的一段内容都是<code>\0</code>的话, 只会记录却并不会write<code>\0</code>到dst文件, 最终在fst文件做lseek偏移</li><li>注意设置为LL才不会溢出int上限</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: ...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">5LL</span><span class="token operator">*</span><span class="token number">1024LL</span><span class="token operator">*</span><span class="token number">1024LL</span><span class="token operator">*</span><span class="token number">1024LL</span><span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># vim big.c</span>root@k8s-wolf-minion-47:~<span class="token comment"># make big</span>cc     big.c   -o bigroot@k8s-wolf-minion-47:~<span class="token comment"># ./big bigfile</span>root@k8s-wolf-minion-47:~<span class="token comment"># ll bigfile</span>-rw------- <span class="token number">1</span> root root <span class="token number">5368709120</span> Feb <span class="token number">19</span> <span class="token number">18</span>:42 bigfileroot@k8s-wolf-minion-47:~<span class="token comment"># stat bigfile</span>  File: <span class="token string">'bigfile'</span>  Size: <span class="token number">5368709120</span>Blocks: <span class="token number">8</span>          IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>Device: fc00h/64512dInode: <span class="token number">76546720</span>    Links: <span class="token number">1</span>Access: <span class="token punctuation">(</span>0600/-rw-------<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>Access: <span class="token number">2021</span>-02-19 <span class="token number">18</span>:42:09.195734809 +0800Modify: <span class="token number">2021</span>-02-19 <span class="token number">18</span>:42:09.195734809 +0800Change: <span class="token number">2021</span>-02-19 <span class="token number">18</span>:42:09.195734809 +0800 Birth: -  root@k8s-wolf-minion-47:~<span class="token comment"># rm /tmp/bigfile.bk</span>root@k8s-wolf-minion-47:~<span class="token comment"># time bigfile /tmp/bigfile.bk</span>bigfile: <span class="token builtin class-name">command</span> not foundreal0m0.160suser0m0.120ssys0m0.040sroot@k8s-wolf-minion-47:~<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>5G文件占用的是4KB(因为8块, 每块512Bytes)</li><li>st_mode是16位的位图, 表示文件的类型</li><li>粘住位, 一般是<code>/tmp</code>的最后一位是t</li><li>FAT文件系统: 静态单链表, 轻量级, 缺陷: 上限有限制, 单链表只能单向</li><li>UFS: </li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>硬链接: 就是目录项, 缺点: 不能给分区建立, 不能给目录建立</p><p>软链接: 即符号链接, 其值为<code>指向的文件名</code>, 优点: 可以给分区建立, 可以给目录建立</p><p>link unlink remove rename</p><p>utime: 最后读/更改的时间</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">closedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewinddir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>##argc argv</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token punctuation">.</span><span class="token operator">/</span>main abc <span class="token number">123</span> <span class="token number">456</span> <span class="token number">789</span>          argv         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">|</span>          <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token string">"./main"</span>         <span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token operator">|</span>          <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token string">"abc"</span>         <span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token operator">|</span>          <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token string">"123"</span>         <span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                   <span class="token string">"456"</span>         <span class="token operator">|</span>          <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                   <span class="token string">"789"</span>         <span class="token operator">|</span>          <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h2><p>解析模式/通配符</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;glob.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">PAT</span> <span class="token string">"/etc/a*.conf"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: 1 argvs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token class-name">glob_t</span> globres<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> err<span class="token punctuation">;</span>    err <span class="token operator">=</span> <span class="token function">glob</span><span class="token punctuation">(</span>PAT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>globres<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error code = %d\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> globres<span class="token punctuation">.</span>gl_pathc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span>globres<span class="token punctuation">.</span>gl_pathv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">globfree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>globres<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="readdir"><a href="#readdir" class="headerlink" title="readdir"></a>readdir</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;glob.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">PAT</span> <span class="token string">"/etc"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  DIR <span class="token operator">*</span>dp<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>cur<span class="token punctuation">;</span>    dp <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>PAT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"opendir()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closedir</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>占用的磁盘空间大小, KBytes为单位</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># stat read.c</span>  File: <span class="token string">'read.c'</span>  Size: <span class="token number">1068</span>      Blocks: <span class="token number">8</span>          IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>Device: fc00h/64512dInode: <span class="token number">76546716</span>    Links: <span class="token number">1</span>Access: <span class="token punctuation">(</span>0644/-rw-r--r--<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>Access: <span class="token number">2021</span>-02-19 <span class="token number">13</span>:24:30.344781444 +0800Modify: <span class="token number">2021</span>-02-19 <span class="token number">13</span>:24:28.736767302 +0800Change: <span class="token number">2021</span>-02-19 <span class="token number">13</span>:24:28.736767302 +0800 Birth: - root@k8s-wolf-minion-47:~<span class="token comment"># du read.c</span><span class="token number">4</span>read.c<span class="token number">8</span>个block * 512Bytes/block <span class="token operator">=</span> 4KBytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自己实现du如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;glob.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">PATHSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">path_noloop</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>pos <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> pos <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mydu</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">stat</span> statres<span class="token punctuation">;</span>  <span class="token class-name">glob_t</span> globres<span class="token punctuation">;</span>  <span class="token keyword">char</span> nextpath<span class="token punctuation">[</span>PATHSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lstat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>statres<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"lstat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>statres<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> statres<span class="token punctuation">.</span>st_blocks<span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>nextpath<span class="token punctuation">,</span> path<span class="token punctuation">,</span> PATHSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strncat</span><span class="token punctuation">(</span>nextpath<span class="token punctuation">,</span> <span class="token string">"/*"</span><span class="token punctuation">,</span> PATHSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glob</span><span class="token punctuation">(</span>nextpath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>globres<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>nextpath<span class="token punctuation">,</span> path<span class="token punctuation">,</span> PATHSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strncat</span><span class="token punctuation">(</span>nextpath<span class="token punctuation">,</span> <span class="token string">"/.*"</span><span class="token punctuation">,</span> PATHSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">glob</span><span class="token punctuation">(</span>nextpath<span class="token punctuation">,</span> GLOB_APPEND<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>globres<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> globres<span class="token punctuation">.</span>gl_pathc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">path_noloop</span><span class="token punctuation">(</span>globres<span class="token punctuation">.</span>gl_pathv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> <span class="token function">mydu</span><span class="token punctuation">(</span>globres<span class="token punctuation">.</span>gl_pathv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sum <span class="token operator">+=</span> statres<span class="token punctuation">.</span>st_blocks<span class="token punctuation">;</span>    <span class="token function">globfree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>globres<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: 1 argv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">mydu</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为512Bytes为一个块, 所以占用的Bytes数为块数*512/1024=块数/2</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:./du /etc/<span class="token number">6860</span>/etc/root@k8s-wolf-minion-47: ./mydu /etc/<span class="token number">6860</span>%root@k8s-wolf-minion-47: <span class="token function">du</span> glob.c<span class="token number">8</span>glob.croot@k8s-wolf-minion-47: ./mydu glob.c<span class="token number">8</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Fdisk -l可以看到磁盘块大小</li></ul><h2 id="系统数据文件和信息"><a href="#系统数据文件和信息" class="headerlink" title="系统数据文件和信息"></a>系统数据文件和信息</h2><p>/etc/passwd</p><p>getpwuid getpwunam</p><p>/etc/passwd</p><p>Getgrgid getgrnam</p><p>/etc/shadow</p><h2 id="单进程环境"><a href="#单进程环境" class="headerlink" title="单进程环境"></a>单进程环境</h2><ul><li>main函数</li></ul><p>int main(int argc, char *argc[])</p><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><p>正常终止:</p><ul><li>c共main函数返回</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span>是给当前进程的父进程看的<span class="token punctuation">.</span><span class="token operator">/</span>mainecho $<span class="token operator">?</span>打印上次执行结果 若成功则为<span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>exit()</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>可返回<span class="token operator">-</span><span class="token number">128</span><span class="token operator">~</span><span class="token number">127</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    atexit钩子函数(压入栈), 即go的defer, c++的析构函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f1 working\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f2 working\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f3 working\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"begin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">atexit</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">atexit</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">atexit</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"end\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./atexitbeginendf3 workingf2 workingf1 working<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>_exit()</code> 或<code>_Exit()</code></p><p>是系统调用, 不执行钩子函数和进程资源清理</p></li><li><p>最后一个现场从其启动例程返回</p></li><li><p>最后一个进程调用pthread_exit</p></li></ul><p>异常终止:</p><ul><li>abort()</li><li>接到一个信号并终止</li><li>最后一个线程对其取消请求作出响应</li></ul><h3 id="命令行参数分析"><a href="#命令行参数分析" class="headerlink" title="命令行参数分析"></a>命令行参数分析</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">getopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getopt_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>可以传参</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TIMESTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>tm<span class="token punctuation">;</span>  <span class="token keyword">char</span> timestr<span class="token punctuation">[</span>TIMESTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token class-name">time_t</span> stamp <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tm <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> TIMESTRSIZE<span class="token punctuation">,</span> <span class="token string">"Now:%Y-%m-%d"</span><span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>timestr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TIMESTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">FMTSTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token comment">/*** -y: year* -m: month* -d: day* -H: hour* -M: minute* -s: second*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>tm<span class="token punctuation">;</span>  <span class="token keyword">char</span> timestr<span class="token punctuation">[</span>TIMESTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token keyword">char</span> fmtstr<span class="token punctuation">[</span>FMTSTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  fmtstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>   <span class="token class-name">time_t</span> stamp <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tm <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"HMSymd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'H'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%H "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%M "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%S "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%m "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%d "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> TIMESTRSIZE<span class="token punctuation">,</span> fmtstr<span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>timestr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># date</span>Sun Feb <span class="token number">21</span> <span class="token number">22</span>:36:13 CST <span class="token number">2021</span>root@k8s-wolf-minion-47:~<span class="token comment"># ./getopt -M -S -m -d</span><span class="token number">36</span> <span class="token number">13</span> 02 <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面是带参数的选项, 就是加冒号</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TIMESTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">FMTSTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token comment">/*** -y: year* -m: month* -d: day* -H: hour* -M: minute* -s: second*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>tm<span class="token punctuation">;</span>  <span class="token keyword">char</span> timestr<span class="token punctuation">[</span>TIMESTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token keyword">char</span> fmtstr<span class="token punctuation">[</span>FMTSTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  fmtstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>   <span class="token class-name">time_t</span> stamp <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tm <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"H:MSy:md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'H'</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%I(%P) "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%H "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Invalid arguiments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%H "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%M "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%S "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%Y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>           <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Invalid arguments of -y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%m "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%d "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> TIMESTRSIZE<span class="token punctuation">,</span> fmtstr<span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>timestr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># date</span>Sun Feb <span class="token number">21</span> <span class="token number">22</span>:40:31 CST <span class="token number">2021</span>root@k8s-wolf-minion-47:~<span class="token comment"># ./getopt -M -S -m -d -y 4 -H 12</span><span class="token number">40</span> <span class="token number">35</span> 02 <span class="token number">21</span> <span class="token number">21</span> <span class="token number">10</span><span class="token punctuation">(</span>pm<span class="token punctuation">)</span><span class="token number">22</span>root@k8s-wolf-minion-47:~<span class="token comment"># date</span>Sun Feb <span class="token number">21</span> <span class="token number">22</span>:41:19 CST <span class="token number">2021</span>root@k8s-wolf-minion-47:~<span class="token comment"># ./getopt -H 12</span><span class="token number">10</span><span class="token punctuation">(</span>pm<span class="token punctuation">)</span><span class="token number">22</span>root@k8s-wolf-minion-47:~<span class="token comment"># date</span>Sun Feb <span class="token number">21</span> <span class="token number">22</span>:45:39 CST <span class="token number">2021</span>root@k8s-wolf-minion-47:~<span class="token comment"># ./getopt -y 4 -m -d</span><span class="token number">2021</span> <span class="token number">21</span> 02 <span class="token number">21</span>root@k8s-wolf-minion-47:~<span class="token comment"># ./getopt -y 2 -m -d</span><span class="token number">21</span> <span class="token number">21</span> 02 <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面是非选项传参, 如果传参有文件&amp;&amp;文件可打开则写入文件, 否则写入stdout<ul><li>原理是非选项传参会被<code>getopt()函数</code>识别为<code>1</code></li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TIMESTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">FMTSTRSIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token comment">/*** -y: year* -m: month* -d: day* -H: hour* -M: minute* -s: second*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">stdout</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>tm<span class="token punctuation">;</span>  <span class="token keyword">char</span> timestr<span class="token punctuation">[</span>TIMESTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token keyword">char</span> fmtstr<span class="token punctuation">[</span>FMTSTRSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  fmtstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>   <span class="token class-name">time_t</span> stamp <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tm <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"-H:MSy:md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">stdout</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>optind<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fp <span class="token operator">=</span> <span class="token constant">stdout</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'H'</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%I(%P) "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%H "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Invalid arguiments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%H "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%M "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%S "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>optarg<span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%Y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>           <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Invalid arguments of -y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%y "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%m "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>        <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"%d "</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">strncat</span><span class="token punctuation">(</span>fmtstr<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> FMTSTRSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strftime</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> TIMESTRSIZE<span class="token punctuation">,</span> fmtstr<span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fputs</span><span class="token punctuation">(</span>timestr<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">stdout</span><span class="token punctuation">)</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./getopt -y <span class="token number">4</span> /tmp/o0 -m /tmp/o1 -d /tmp/o2ubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/o0<span class="token number">2021</span> <span class="token number">21</span> 02 <span class="token number">21</span>ubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/o1cat: /tmp/o1: No such <span class="token function">file</span> or directoryubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/o2cat: /tmp/o2: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>都存在environ的全局变量中(类似errno全局变量), 是一个字符串数组</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>environ<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span>environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行结果和<code>export</code>相同, 会打印所有环境变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./myenv<span class="token assign-left variable">TERM_SESSION_ID</span><span class="token operator">=</span>w0t1p0:AF2FA44C-F867-49A5-9309-1D3BCDDC8926<span class="token assign-left variable"><span class="token environment constant">SSH_AUTH_SOCK</span></span><span class="token operator">=</span>/private/tmp/com.apple.launchd.WpTXLeu8Cx/Listeners<span class="token assign-left variable">LC_TERMINAL_VERSION</span><span class="token operator">=</span><span class="token number">3.4</span>.4 ~/go/src/github.com/sonnary/apue/y   master ●✚  <span class="token builtin class-name">export</span><span class="token assign-left variable">TERM_SESSION_ID</span><span class="token operator">=</span>w0t1p0:AF2FA44C-F867-49A5-9309-1D3BCDDC8926<span class="token assign-left variable"><span class="token environment constant">SSH_AUTH_SOCK</span></span><span class="token operator">=</span>/private/tmp/com.apple.launchd.WpTXLeu8Cx/Listeners<span class="token assign-left variable">LC_TERMINAL_VERSION</span><span class="token operator">=</span><span class="token number">3.4</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一些函数</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 申请在堆上, 可指定是否覆盖</span><span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放老堆的值, 在堆上申请新值</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不好用, 因为参数没有const修饰</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/y   master ●✚  ./getenv/Users/sunyuchuan/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>C程序的存储空间布局</li></ul><p>32位 4G虚拟内存空间, 3G用户态, 1G内核态. 3G=0x08048000~0xC0000000</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   4G   +-----------------+kernel space              <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>   3G   +---------------------------+ 0XC000000        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span> user space               <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>        +---------------------------+0X08408000        <span class="token operator">|</span>                 <span class="token operator">|</span>        <span class="token operator">|</span>                 <span class="token operator">|</span>  <span class="token number">0</span>     +-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># ps aux | grep getenv</span>root      <span class="token number">93166</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">4352</span>   <span class="token number">672</span> pts/0    S+   <span class="token number">16</span>:21   <span class="token number">0</span>:00 ./getenvroot@k8s-wolf-minion-47:~<span class="token comment"># pmap 93166</span><span class="token number">93166</span>:   ./getenv0000000000400000      4K r-x-- getenv0000000000600000      4K r---- getenv0000000000601000      4K rw--- getenv0000000001145000    132K rw---   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span>00007f5ce8073000   1792K r-x-- libc-2.23.so00007f5ce8233000   2048K ----- libc-2.23.so00007f5ce8433000     16K r---- libc-2.23.so00007f5ce8437000      8K rw--- libc-2.23.so00007f5ce8439000     16K rw---   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span>00007f5ce843d000    152K r-x-- ld-2.23.so00007f5ce8658000     12K rw---   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span>00007f5ce8662000      4K r---- ld-2.23.so00007f5ce8663000      4K rw--- ld-2.23.so00007f5ce8664000      4K rw---   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span>00007ffc9817b000    132K rw---   <span class="token punctuation">[</span> stack <span class="token punctuation">]</span>00007ffc981f2000     12K r----   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span>00007ffc981f5000      8K r-x--   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span>ffffffffff600000      4K r-x--   <span class="token punctuation">[</span> anon <span class="token punctuation">]</span> total             4356K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pmap(1)命令</li></ul><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><ul><li><p>动态库</p></li><li><p>静态库</p></li><li><p>手工装载库</p></li><li><p>加载动态库的流程: dlopen, dlsym, dlerror, dlclose</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gnu/lib-names.h&gt;</span>  <span class="token comment">/* Defines LIBM_SO (which will be a                                        string such as "libm.so.6") */</span></span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">;</span>  <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>cosine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>error<span class="token punctuation">;</span>  handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>LIBM_SO<span class="token punctuation">,</span> RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Clear any existing error */</span>  cosine <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"cos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* According to the ISO C standard, casting between function                pointers and 'void *', as done above, produces undefined results.                POSIX.1-2003 and POSIX.1-2008 accepted this state of affairs and                proposed the following workaround:                    *(void **) (&amp;cosine) = dlsym(handle, "cos");                This (clumsy) cast conforms with the ISO C standard and will                avoid any compiler warnings.                The 2013 Technical Corrigendum to POSIX.1-2008 (a.k.a.                POSIX.1-2013) improved matters by requiring that conforming                implementations support casting 'void *' to a function pointer.                Nevertheless, some compilers (e.g., gcc with the '-pedantic'                option) may complain about the cast used in this program. */</span>  error <span class="token operator">=</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>cosine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dlclose</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈-静态区管理"><a href="#栈-静态区管理" class="headerlink" title="栈 静态区管理"></a>栈 静态区管理</h3></li></ul><h3 id="函数跳转"><a href="#函数跳转" class="headerlink" title="函数跳转"></a>函数跳转</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">setjmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">longjmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>比goto功能高级: 可以跨函数</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call d().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():d() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call c().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():c() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call b().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():b() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call a().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():a() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main -&gt; a() -&gt; b() -&gt; c() -&gt; d()</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> +------------+ <span class="token operator">|</span>            <span class="token operator">|</span>  d+-------------+ <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token operator">|</span>            <span class="token operator">|</span>  c +------------+ <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token operator">|</span>            <span class="token operator">|</span>  b <span class="token operator">|</span>            <span class="token operator">|</span> +------------+ <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token operator">|</span>            <span class="token operator">|</span>   a <span class="token operator">|</span>            <span class="token operator">|</span> +------------+ <span class="token operator">|</span>            <span class="token operator">|</span> <span class="token operator">|</span>            <span class="token operator">|</span>   main <span class="token operator">|</span>            <span class="token operator">|</span> +------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">root@k8s<span class="token operator">-</span>wolf<span class="token operator">-</span>minion<span class="token operator">-</span><span class="token number">47</span><span class="token operator">:</span><span class="token operator">~</span># <span class="token punctuation">.</span><span class="token operator">/</span>jump<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Begin<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Begin<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Begin<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Begin<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Begin<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> End<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> returned<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> End<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> returned<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> End<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> returned<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> End<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> returned<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> End<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数a做setjump, 函数d做longjump跳到a处, 改写为如下<ul><li>能跨函数跳, 交出函数执行权+执行环境</li><li>setjmp()执行一次, 返回两次</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;setjmp.h&gt;</span></span><span class="token keyword">static</span> jmp_buf save<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): jump now\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">longjmp</span><span class="token punctuation">(</span>save<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call d().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():d() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call c().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():c() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setjmp</span><span class="token punctuation">(</span>save<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call b().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():b() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): jumped back here with code %d\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Begin.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): Call a().\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():a() returned.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s(): End.\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># ./setjmp</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>: Begin.main<span class="token punctuation">(</span><span class="token punctuation">)</span>: Call a<span class="token punctuation">(</span><span class="token punctuation">)</span>.a<span class="token punctuation">(</span><span class="token punctuation">)</span>: Begin.a<span class="token punctuation">(</span><span class="token punctuation">)</span>: Call b<span class="token punctuation">(</span><span class="token punctuation">)</span>.b<span class="token punctuation">(</span><span class="token punctuation">)</span>: Begin.b<span class="token punctuation">(</span><span class="token punctuation">)</span>: Call c<span class="token punctuation">(</span><span class="token punctuation">)</span>.c<span class="token punctuation">(</span><span class="token punctuation">)</span>: Begin.c<span class="token punctuation">(</span><span class="token punctuation">)</span>: Call d<span class="token punctuation">(</span><span class="token punctuation">)</span>.d<span class="token punctuation">(</span><span class="token punctuation">)</span>: Begin.d<span class="token punctuation">(</span><span class="token punctuation">)</span>: jump nowa<span class="token punctuation">(</span><span class="token punctuation">)</span>: jumped back here with code <span class="token number">6</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>: End.main<span class="token punctuation">(</span><span class="token punctuation">)</span>:a<span class="token punctuation">(</span><span class="token punctuation">)</span> returned.main<span class="token punctuation">(</span><span class="token punctuation">)</span>: End.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="资源获取与控制-如ulimit"><a href="#资源获取与控制-如ulimit" class="headerlink" title="资源获取与控制(如ulimit)"></a>资源获取与控制(如ulimit)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gettlimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setrlimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>组合就是ulimit命令</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程标识符pid"><a href="#进程标识符pid" class="headerlink" title="进程标识符pid"></a>进程标识符pid</h2><p>类型pid_t 有符号的16位整数, 最多3w个进程</p><p><code>ps axf</code></p><p><code>ps axm</code></p><p><code>ps ax -L</code>看轻量进程</p><p>进程号是顺次向下使用</p><p><code>getpid()</code></p><p><code>getppid()</code></p><h2 id="进程的产生"><a href="#进程的产生" class="headerlink" title="进程的产生"></a>进程的产生</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h3><ul><li><p>在2个进程返回</p><ul><li>父进程 返回 子进程pid(失败时父进程 返回 -1 &amp;&amp; 设置errno)</li><li>子进程 返回 0</li></ul></li><li><p>复制父进程(一模一样, 包括已执行到的位置)</p></li><li><p>除了以下不同: </p><ul><li>pid不同, ppid也不同, <code>fork()</code>返回值不同</li><li>未决信号和文件锁 不继承</li><li>资源利用量清0</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">      parent process          child process  +----------+                +----------+  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>+-------------+已 执 行 处      +--------------+  已 执 行 处  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>    fork        <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>  +---------<span class="token operator">&gt;</span>   <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  <span class="token operator">|</span>          <span class="token operator">|</span>                <span class="token operator">|</span>          <span class="token operator">|</span>  +----------+                +----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] Begin!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: child is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: parent is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] End!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./fork<span class="token punctuation">[</span><span class="token number">160859</span><span class="token punctuation">]</span> Begin<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">160859</span><span class="token punctuation">]</span>: parent is working<span class="token punctuation">[</span><span class="token number">160859</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">160860</span><span class="token punctuation">]</span>: child is working<span class="token punctuation">[</span><span class="token number">160860</span><span class="token punctuation">]</span> End<span class="token operator">!</span> 或   ubuntu@k8s-wolf-minion-47:~$ ./fork<span class="token punctuation">[</span><span class="token number">160859</span><span class="token punctuation">]</span> Begin<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">160859</span><span class="token punctuation">]</span>: child is working<span class="token punctuation">[</span><span class="token number">160859</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">160860</span><span class="token punctuation">]</span>: parent is working<span class="token punctuation">[</span><span class="token number">160860</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>调度器的调度策略</code> 决定 哪个进程先运行(可能child或parent被调度的顺序是不确定的)</li><li>下面的代码加了getchar(), 使程序停下来, 用ps观察</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] Begin!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: child is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: parent is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] End!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> axf 找进程号<span class="token number">160027</span> ?        Ss     <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ sshd: ubuntu <span class="token punctuation">[</span>priv<span class="token punctuation">]</span><span class="token number">160039</span> ?        S      <span class="token number">0</span>:00  <span class="token operator">|</span>   <span class="token punctuation">\</span>_ sshd: ubuntu@pts/0<span class="token number">160040</span> pts/0    Ss     <span class="token number">0</span>:00  <span class="token operator">|</span>       <span class="token punctuation">\</span>_ -bash<span class="token number">161677</span> pts/0    S+     <span class="token number">0</span>:00  <span class="token operator">|</span>           <span class="token punctuation">\</span>_ ./fork<span class="token number">161678</span> pts/0    S+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ ./fork<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一定要先fflush-再fork"><a href="#一定要先fflush-再fork" class="headerlink" title="一定要先fflush()再fork()"></a>一定要先fflush()再fork()</h4><ul><li>去掉getchar, 重定向到文件中<ul><li>Begin被打印2次</li><li>解决办法, 在fork前用<code>fflush()</code>刷新所有成功打开的流</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] Begin!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: child is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: parent is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] End!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./fork <span class="token operator">&gt;</span> /tmp/outubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out<span class="token punctuation">[</span><span class="token number">162452</span><span class="token punctuation">]</span> Begin<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">162452</span><span class="token punctuation">]</span>: parent is working<span class="token punctuation">[</span><span class="token number">162452</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">162452</span><span class="token punctuation">]</span> Begin<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">162453</span><span class="token punctuation">]</span>: child is working<span class="token punctuation">[</span><span class="token number">162453</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加<code>fflush()</code>改进为如下</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] Begin!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: child is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d]: parent is working\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] End!\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./fork <span class="token operator">&gt;</span> /tmp/outubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out<span class="token punctuation">[</span><span class="token number">163515</span><span class="token punctuation">]</span> Begin<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">163515</span><span class="token punctuation">]</span>: parent is working<span class="token punctuation">[</span><span class="token number">163515</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">163516</span><span class="token punctuation">]</span>: child is working<span class="token punctuation">[</span><span class="token number">163516</span><span class="token punctuation">]</span> End<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在begin放到缓冲区, 然后fork后, 父子进程的缓冲区各有一句<code>"begin"</code>, 所以为了避免就需要fflush()</p><h4 id="计算质数"><a href="#计算质数" class="headerlink" title="计算质数"></a>计算质数</h4><ul><li>单机版</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LEFT</span> <span class="token expression"><span class="token number">30000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">RIGHT</span> <span class="token expression"><span class="token number">30000200</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> mark<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is a primer\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ <span class="token function">time</span> ./primer0 <span class="token operator">&gt;</span> /dev/nullreal0m1.187suser0m1.188ssys0m0.000s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>201个子进程<ul><li>父进程fork201次</li><li>子进程负责执行, 但子进程不应继续fork孙进程(子进程需要有退出方法)</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LEFT</span> <span class="token expression"><span class="token number">30000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">RIGHT</span> <span class="token expression"><span class="token number">30000200</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> mark<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is a primer\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子进程的退出方法, 防止子进程再fork孙进程</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./primer1 <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token number">18</span>ubuntu@k8s-wolf-minion-47:~$ <span class="token function">time</span> ./primer1 <span class="token operator">&gt;</span> /dev/nullreal0m0.020suser0m0.000ssys0m0.020s// 性能取决于有几核, 若有x个核, 则y个进程排队等待被x个核调度, 则性能会提升x倍, 速度会变为y/x.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面先让父进程结束</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LEFT</span> <span class="token expression"><span class="token number">30000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">RIGHT</span> <span class="token expression"><span class="token number">30000200</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> mark<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is a primer\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子进程的退出方法, 防止子进程再fork孙进程</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">42259</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42260</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42261</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42262</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42263</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42264</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42265</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42266</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42267</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42268</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42269</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42270</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42271</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42272</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42273</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42274</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42275</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42276</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42277</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42278</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42279</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42280</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42281</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42282</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span class="token number">42283</span> pts/0    S+     <span class="token number">0</span>:00 ./primer1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面是父进程sleep(1000)<ul><li>当父进程sleep1000满后, 父进程exit(0), 子进程变为<code>Z+</code>僵尸进程</li><li>init收留各孤儿进程, 当子进程exit()后, init会将各子进程收尸, 变为孤儿进程(所以僵尸态是一闪而过的) </li><li>僵尸态不占什么资源, 基本就是一个结构体指针(包含pid, 进程退出状态), 但是会占pid号(需要释放pid号)</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LEFT</span> <span class="token expression"><span class="token number">30000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">RIGHT</span> <span class="token expression"><span class="token number">30000200</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> mark<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is a primer\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子进程的退出方法, 防止子进程再fork孙进程</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">36188</span> ?        Ss     <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ sshd: ubuntu <span class="token punctuation">[</span>priv<span class="token punctuation">]</span> <span class="token number">36190</span> ?        S      <span class="token number">0</span>:00  <span class="token operator">|</span>   <span class="token punctuation">\</span>_ sshd: ubuntu@pts/0 <span class="token number">36191</span> pts/0    Ss     <span class="token number">0</span>:00  <span class="token operator">|</span>       <span class="token punctuation">\</span>_ -bash <span class="token number">43360</span> pts/0    S+     <span class="token number">0</span>:00  <span class="token operator">|</span>           <span class="token punctuation">\</span>_ ./primer1 <span class="token number">43361</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43362</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43363</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43364</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43365</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43366</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43367</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43368</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43369</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43370</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43371</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43372</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43373</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43374</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43375</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43376</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43377</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43378</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span> <span class="token number">43379</span> pts/0    Z+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token punctuation">[</span>primer1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>defunct<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h3><ul><li>是1号进程, 是所有进程的祖先进程</li></ul><h3 id="vfork"><a href="#vfork" class="headerlink" title="vfork()"></a>vfork()</h3><p>写时复制已合并到fork里了</p><h2 id="进程的消亡及释放资源"><a href="#进程的消亡及释放资源" class="headerlink" title="进程的消亡及释放资源"></a>进程的消亡及释放资源</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LEFT</span> <span class="token expression"><span class="token number">30000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">RIGHT</span> <span class="token expression"><span class="token number">30000200</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> mark<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is a primer\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子进程的退出方法, 防止子进程再fork孙进程</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 循环201次, 等201个子进程exit后, 收201个子进程的收尸</span>  <span class="token punctuation">}</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分配方法<ul><li>分块法</li><li>交叉分配法</li><li>池</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LEFT</span> <span class="token expression"><span class="token number">30000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">RIGHT</span> <span class="token expression"><span class="token number">30000200</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> mark<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LEFT<span class="token operator">+</span>n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> RIGHT<span class="token punctuation">;</span> i<span class="token operator">+=</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span>mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[第%d个进程] 数字%d is a primer\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子进程的退出方法, 防止子进程再fork孙进程</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 循环3次, 等3个子进程exit后, 收3个子进程的收尸</span><span class="token punctuation">}</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./primerN<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000001 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000023 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000037 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000041 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000059 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000049 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000071 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000079 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000083 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000109 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000137 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000133 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000149 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000163 is a primer<span class="token punctuation">[</span>第2个进程<span class="token punctuation">]</span> 数字30000167 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000169 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000193 is a primer<span class="token punctuation">[</span>第1个进程<span class="token punctuation">]</span> 数字30000199 is a primerubuntu@k8s-wolf-minion-47:~$ ./primerN <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token number">18</span>ubuntu@k8s-wolf-minion-47:~$ <span class="token function">time</span> ./primerN <span class="token operator">&gt;</span> /dev/nullreal0m0.817suser0m1.444ssys0m0.000s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exec函数族"><a href="#exec函数族" class="headerlink" title="exec函数族"></a>exec函数族</h2><ul><li>注意先fflush(), 再exec()</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token comment">/*** date +%s*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Begin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/date"</span><span class="token punctuation">,</span> <span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token string">"+%s"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用date进程代替本进程, 若成功则不会返回, 失败才会返回</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"End!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./ex <span class="token operator">&gt;</span> /tmp/outubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out<span class="token number">1613972219</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="fork-exec-wait组合"><a href="#fork-exec-wait组合" class="headerlink" title="fork+exec+wait组合"></a>fork+exec+wait组合</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"BEGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/date"</span><span class="token punctuation">,</span> <span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token string">"+%s"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execl()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"END"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./fewBEGIN<span class="token number">1613972883</span>END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">          father process                                       child process            file desc table         <span class="token constant">stdin</span>                       file desc table    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>              <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>                <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">0</span>  <span class="token operator">|</span>                <span class="token operator">|</span>              <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>  <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span>  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>                <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>               <span class="token constant">stdout</span>               <span class="token operator">|</span>                        <span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span>                <span class="token operator">|</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">|</span>      <span class="token operator">|</span>                <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>                <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">2</span>   <span class="token operator">|</span>                <span class="token operator">|</span>              <span class="token constant">stderr</span>                <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>            <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>           <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span>   <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">|</span>                <span class="token operator">|</span>                                    <span class="token operator">|</span>                        <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>                                    <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sleep-100"><a href="#sleep-100" class="headerlink" title="sleep(100)"></a>sleep(100)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"BEGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sleep"</span><span class="token punctuation">,</span> <span class="token string">"sleep"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execl()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"END"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">66706</span> ?        Ss     <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ sshd: ubuntu <span class="token punctuation">[</span>priv<span class="token punctuation">]</span><span class="token number">66718</span> ?        S      <span class="token number">0</span>:00  <span class="token operator">|</span>   <span class="token punctuation">\</span>_ sshd: ubuntu@pts/0<span class="token number">66719</span> pts/0    Ss     <span class="token number">0</span>:00  <span class="token operator">|</span>       <span class="token punctuation">\</span>_ -bash<span class="token number">70741</span> pts/0    S+     <span class="token number">0</span>:00  <span class="token operator">|</span>           <span class="token punctuation">\</span>_ ./sleep<span class="token number">70742</span> pts/0    S+     <span class="token number">0</span>:00  <span class="token operator">|</span>               <span class="token punctuation">\</span>_ <span class="token function">sleep</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="myshell练习"><a href="#myshell练习" class="headerlink" title="myshell练习"></a>myshell练习</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;glob.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">DELIMS</span> <span class="token string">" \t\n"</span></span><span class="token keyword">struct</span> <span class="token class-name">cmd_st</span> <span class="token punctuation">{</span>  <span class="token class-name">glob_t</span> globres<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mysh-0.1$ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_st</span> <span class="token operator">*</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>tok<span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tok <span class="token operator">=</span> <span class="token function">strsep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>line<span class="token punctuation">,</span> DELIMS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tok <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tok<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token function">glob</span><span class="token punctuation">(</span>tok<span class="token punctuation">,</span> GLOB_NOCHECK<span class="token operator">|</span>GLOB_APPEND <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token operator">-&gt;</span>globres<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>linebuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token class-name">size_t</span> linebuf_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">cmd_st</span> cmd<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">getline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>linebuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>linebuf_size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">parse</span><span class="token punctuation">(</span>linebuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是内部命令</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 是外部命令</span>      <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 子进程</span>        <span class="token function">execvp</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>globres<span class="token punctuation">.</span>gl_pathv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>globres<span class="token punctuation">.</span>gl_pathv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execvp()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 父进程</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ <span class="token function">make</span> myshcc     mysh.c   -o myshubuntu@k8s-wolf-minion-47:~$ ./myshmysh-0.1$ <span class="token function">ls</span>big.c  ex.c  few.c  fork.c    getopt.cmydu.cmysh.c      primer0 primer1    primerN    read.c <span class="token function">sleep</span>  time.cex     few   fork   getenv.c  jump.cmyshplatformData  primer0.c  primer1.c  primerN.c  setjmp.c  sleep.c  write.cmysh-0.1$ <span class="token builtin class-name">pwd</span>/home/ubuntumysh-0.1$ llexecvp<span class="token punctuation">(</span><span class="token punctuation">)</span>: No such <span class="token function">file</span> or directorymysh-0.1$ <span class="token function">ls</span> -ltotal <span class="token number">164</span>-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">443</span> Feb <span class="token number">19</span> <span class="token number">18</span>:42 big.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8752</span> Feb <span class="token number">22</span> <span class="token number">13</span>:36 ex-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">342</span> Feb <span class="token number">22</span> <span class="token number">13</span>:36 ex.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8904</span> Feb <span class="token number">22</span> <span class="token number">13</span>:47 few-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">394</span> Feb <span class="token number">22</span> <span class="token number">13</span>:47 few.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8864</span> Feb <span class="token number">22</span> 01:10 fork-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">420</span> Feb <span class="token number">22</span> 01:10 fork.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">105</span> Feb <span class="token number">21</span> <span class="token number">16</span>:20 getenv.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu <span class="token number">1922</span> Feb <span class="token number">21</span> <span class="token number">23</span>:01 getopt.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">981</span> Feb <span class="token number">21</span> <span class="token number">16</span>:58 jump.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu <span class="token number">1262</span> Feb <span class="token number">20</span> <span class="token number">11</span>:54 mydu.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">9176</span> Feb <span class="token number">22</span> <span class="token number">17</span>:42 mysh-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu <span class="token number">1168</span> Feb <span class="token number">22</span> <span class="token number">17</span>:42 mysh.clrwxrwxrwx <span class="token number">1</span> root   root     <span class="token number">13</span> Sep <span class="token number">14</span> <span class="token number">16</span>:31 platformData -<span class="token operator">&gt;</span> /platformData-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8656</span> Feb <span class="token number">22</span> <span class="token number">10</span>:03 primer0-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">372</span> Feb <span class="token number">22</span> <span class="token number">10</span>:03 primer0.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8808</span> Feb <span class="token number">22</span> <span class="token number">10</span>:33 primer1-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">563</span> Feb <span class="token number">22</span> <span class="token number">10</span>:33 primer1.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8808</span> Feb <span class="token number">22</span> <span class="token number">12</span>:28 primerN-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">770</span> Feb <span class="token number">22</span> <span class="token number">12</span>:28 primerN.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu <span class="token number">1068</span> Feb <span class="token number">19</span> <span class="token number">13</span>:24 read.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu <span class="token number">1228</span> Feb <span class="token number">21</span> <span class="token number">21</span>:54 setjmp.c-rwxr-xr-x <span class="token number">1</span> ubuntu ubuntu <span class="token number">8912</span> Feb <span class="token number">22</span> <span class="token number">13</span>:56 <span class="token function">sleep</span>-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">396</span> Feb <span class="token number">22</span> <span class="token number">13</span>:56 sleep.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">294</span> Feb <span class="token number">21</span> <span class="token number">22</span>:21 time.c-rw-r--r-- <span class="token number">1</span> ubuntu ubuntu  <span class="token number">206</span> Feb <span class="token number">19</span> <span class="token number">13</span>:41 write.cmysh-0.1$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户权限和组权限"><a href="#用户权限和组权限" class="headerlink" title="用户权限和组权限"></a>用户权限和组权限</h3><p><code>u+s, g+s</code>的实现是通过fork + exec然后切换为对应effective user实现的</p><h2 id="观摩课-解释器文件"><a href="#观摩课-解释器文件" class="headerlink" title="观摩课: 解释器文件"></a>观摩课: 解释器文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@ubuntu:/home/ubuntu<span class="token comment"># chgrp ubuntu mysu</span>root@ubuntu:/home/ubuntu<span class="token comment"># ll mysu.c</span>-rw-r--r-- <span class="token number">1</span> root ubuntu <span class="token number">429</span> Feb <span class="token number">22</span> <span class="token number">18</span>:31 mysuroot@ubuntu:/home/ubuntu<span class="token comment"># chmod u+s mysu</span>root@ubuntu:/home/ubuntu<span class="token comment"># ll mysu.c</span>-rwSr--r-- <span class="token number">1</span> root ubuntu <span class="token number">429</span> Feb <span class="token number">22</span> <span class="token number">18</span>:31 mysu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execvp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execvp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@ubuntu:~$ <span class="token function">cat</span> /etc/shadowcat: /etc/shadow: Permission deniedubuntu@ubuntu:~$ ./mysu <span class="token number">0</span> <span class="token function">cat</span> /etc/shadowroot:*:18519:0:99999:7:::daemon:*:17743:0:99999:7:::bin:*:17743:0:99999:7:::sys:*:17743:0:99999:7:::sync:*:17743:0:99999:7:::games:*:17743:0:99999:7:::man:*:17743:0:99999:7:::lp:*:17743:0:99999:7:::mail:*:17743:0:99999:7:::news:*:17743:0:99999:7:::uucp:*:17743:0:99999:7:::proxy:*:17743:0:99999:7:::www-data:*:17743:0:99999:7:::backup:*:17743:0:99999:7:::list:*:17743:0:99999:7:::irc:*:17743:0:99999:7:::gnats:*:17743:0:99999:7:::nobody:*:17743:0:99999:7:::systemd-timesync:*:17743:0:99999:7:::systemd-network:*:17743:0:99999:7:::systemd-resolve:*:17743:0:99999:7:::systemd-bus-proxy:*:17743:0:99999:7:::syslog:*:17743:0:99999:7:::_apt:*:17743:0:99999:7:::lxd:*:18519:0:99999:7:::messagebus:*:18519:0:99999:7:::uuidd:*:18519:0:99999:7:::dnsmasq:*:18519:0:99999:7:::sshd:*:18519:0:99999:7:::ubuntu:<span class="token variable">$6</span><span class="token variable">$Be</span>.6KxDz<span class="token variable">$5MH6Hm2yqudKmqroQO8uA04WdsdBoeE</span>/JLR395vRGmANkRMlcam8/hZra18hWQjE5d57z7BbLPyjsyTHQYv9q.:18519:0:99999:7:::ftp:*:18519:0:99999:7:::postgres:*:18519:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"date +%s &gt; /tmp/out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./sysubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out<span class="token number">1613993971</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>是fork, exec, wait的封装, system()会调/bin/sh -c, 内部实际上是如下原理</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"BEGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"date +%s"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execl()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"END"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./sys1BEGIN<span class="token number">1613994175</span>END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程会计"><a href="#进程会计" class="headerlink" title="进程会计"></a>进程会计</h2><p>acct</p><h2 id="进程时间"><a href="#进程时间" class="headerlink" title="进程时间"></a>进程时间</h2><p>times</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>httpd sshd vsftpd dhcp</p><p>守护进程是没有stdin的(会重定向或close), (因为守护进程是后台进程, 一旦stdin输入会把守护进程杀死)</p><p>如下3个特点:</p><ul><li>子进程调用setsid()使sessionid, processid, processgroupid相同</li><li>并且其父进程退出, 使init为其父进程</li><li>tty为空</li></ul><p>getpgrp(), getpgid(), setpgid()</p><ul><li>下面写一个守护进程</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FNAME</span> <span class="token string">"/tmp/out"</span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// parent</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ------以下为child------</span>  <span class="token comment">// 重定向stdin, stdout, stderr</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果不产生文件的话, 可以关掉umask</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>FNAME<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./mydaemonubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out01234ubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out0123456ubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out01234567ubuntu@k8s-wolf-minion-47:~$ <span class="token function">cat</span> /tmp/out012345678ubuntu@k8s-wolf-minion-47:~$ubuntu@k8s-wolf-minion-47:~$ <span class="token function">ps</span> axj  <span class="token environment constant">PPID</span>    PID   PGID    SID TTY       TPGID STAT   <span class="token environment constant">UID</span>   TIME COMMAND     <span class="token number">1</span> <span class="token number">126975</span> <span class="token number">126975</span> <span class="token number">126975</span> ?            -1 Ss    <span class="token number">1000</span>   <span class="token number">0</span>:00 ./mydaemon     ubuntu@k8s-wolf-minion-47:~$ <span class="token function">kill</span> <span class="token number">126975</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vsftpd的守护进程</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># service vsftpd status</span>● vsftpd.service - vsftpd FTP server   Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/vsftpd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Fri <span class="token number">2020</span>-11-06 <span class="token number">11</span>:50:53 CST<span class="token punctuation">;</span> <span class="token number">3</span> months <span class="token number">17</span> days ago Main PID: <span class="token number">1532</span> <span class="token punctuation">(</span>vsftpd<span class="token punctuation">)</span>    Tasks: <span class="token number">1</span>   Memory: <span class="token number">1</span>.2M      CPU: 6ms   CGroup: /system.slice/vsftpd.service           └─1532 /usr/sbin/vsftpd /etc/vsftpd.confWarning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.root@k8s-wolf-minion-47:~<span class="token comment"># service vsftpd stop</span>root@k8s-wolf-minion-47:~<span class="token comment"># service vsftpd start</span>root@k8s-wolf-minion-47:~<span class="token comment"># service vsftpd start</span>root@k8s-wolf-minion-47:~<span class="token comment"># ps axj  | grep ftp</span>     <span class="token number">1</span> <span class="token number">145688</span> <span class="token number">145688</span> <span class="token number">145688</span> ?            -1 Ss       <span class="token number">0</span>   <span class="token number">0</span>:00 /usr/sbin/vsftpd /etc/vsftpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单实例守护进程-锁文件"><a href="#单实例守护进程-锁文件" class="headerlink" title="单实例守护进程-锁文件"></a>单实例守护进程-锁文件</h3><ul><li>/var/run/xxx.pid`</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:/var/run<span class="token comment"># ll | grep pid</span>-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">5</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 acpid.pidsrw-rw-rw-  <span class="token number">1</span> root     root        <span class="token number">0</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 acpid.socket<span class="token operator">=</span>-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">5</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 atd.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">5</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 crond.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">4</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 docker.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">5</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 irqbalance.pid-rw-------  <span class="token number">1</span> root     root        <span class="token number">5</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 iscsid.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">4</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 lvmetad.pid-rw-------  <span class="token number">1</span> root     root        <span class="token number">5</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 lxcfs.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">4</span> Nov  <span class="token number">6</span> <span class="token number">11</span>:50 rsyslogd.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">6</span> Nov <span class="token number">23</span> <span class="token number">11</span>:14 sshd.pid-rw-r--r--  <span class="token number">1</span> root     root        <span class="token number">5</span> Dec <span class="token number">14</span> <span class="token number">10</span>:47 supervisord.pidroot@k8s-wolf-minion-47:/var/run<span class="token comment"># cat supervisord.pid</span><span class="token number">7148</span>root@k8s-wolf-minion-47:/var/run<span class="token comment"># cat sshd.pid</span><span class="token number">38648</span>root@k8s-wolf-minion-47:/var/run<span class="token comment"># ps axj | grep 7148</span>  <span class="token number">7148</span>    <span class="token number">910</span>    <span class="token number">910</span>   <span class="token number">7148</span> ?            -1 S        <span class="token number">0</span>   <span class="token number">0</span>:00 /bin/bash /home/ubuntu/platformTG/dbtool/latest/sv_start.sh   <span class="token number">910</span>    <span class="token number">911</span>    <span class="token number">910</span>   <span class="token number">7148</span> ?            -1 Sl       <span class="token number">0</span>  <span class="token number">41</span>:26 ./dbtool     <span class="token number">1</span>   <span class="token number">7148</span>   <span class="token number">7148</span>   <span class="token number">7148</span> ?            -1 Ss       <span class="token number">0</span>  <span class="token number">86</span>:27 /usr/bin/python /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf          root@k8s-wolf-minion-47:/var/run<span class="token comment"># ps axj | grep 38648</span>     <span class="token number">1</span>  <span class="token number">38648</span>  <span class="token number">38648</span>  <span class="token number">38648</span> ?            -1 Ss       <span class="token number">0</span>   <span class="token number">0</span>:00 sshd: /usr/sbin/sshd -D -f /etc/ssh/sshd_config <span class="token punctuation">[</span>listener<span class="token punctuation">]</span> <span class="token number">0</span> of <span class="token number">10</span>-100 startups <span class="token number">38648</span> <span class="token number">139349</span> <span class="token number">139349</span> <span class="token number">139349</span> ?            -1 Ss       <span class="token number">0</span>   <span class="token number">0</span>:00 sshd: ubuntu <span class="token punctuation">[</span>priv<span class="token punctuation">]</span>   root@k8s-wolf-minion-47: <span class="token function">ps</span> axf -p <span class="token number">7148</span>  <span class="token number">38648</span> ?        Ss     <span class="token number">0</span>:00 sshd: /usr/sbin/sshd -D -f /etc/ssh/sshd_config <span class="token punctuation">[</span>listener<span class="token punctuation">]</span> <span class="token number">0</span> of <span class="token number">10</span>-100 startups<span class="token number">139349</span> ?        Ss     <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ sshd: ubuntu <span class="token punctuation">[</span>priv<span class="token punctuation">]</span><span class="token number">139392</span> ?        S      <span class="token number">0</span>:00      <span class="token punctuation">\</span>_ sshd: ubuntu@pts/0<span class="token number">139403</span> pts/0    Ss     <span class="token number">0</span>:00          <span class="token punctuation">\</span>_ -bash<span class="token number">143215</span> pts/0    S      <span class="token number">0</span>:00              <span class="token punctuation">\</span>_ <span class="token function">sudo</span> -i<span class="token number">143216</span> pts/0    S      <span class="token number">0</span>:00                  <span class="token punctuation">\</span>_ -bash<span class="token number">146989</span> pts/0    R+     <span class="token number">0</span>:00                      <span class="token punctuation">\</span>_ <span class="token function">ps</span> axf -p <span class="token number">7148</span>  <span class="token number">7148</span> ?        Ss    <span class="token number">86</span>:27 /usr/bin/python /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf   <span class="token number">910</span> ?        S      <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ /bin/bash /home/ubuntu/platformTG/dbtool/latest/sv_start.sh   <span class="token number">911</span> ?        Sl    <span class="token number">41</span>:26      <span class="token punctuation">\</span>_ ./dbtool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="守护进程开机启动脚本文件"><a href="#守护进程开机启动脚本文件" class="headerlink" title="守护进程开机启动脚本文件"></a>守护进程开机启动脚本文件</h3><ul><li><code>/etc/rc...</code>, 一般把启动命令(如启动pg/sshd/ftpd)放在这里, 会使守护进程开机启动, 从ubuntu看是软链接到了<code>/etc/init.d</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:/etc/rc0.d<span class="token comment"># ll</span>total <span class="token number">12</span>drwxr-xr-x   <span class="token number">2</span> root root <span class="token number">4096</span> Dec <span class="token number">14</span> <span class="token number">10</span>:47 ./drwxr-xr-x <span class="token number">101</span> root root <span class="token number">4096</span> Feb <span class="token number">22</span> <span class="token number">23</span>:14 <span class="token punctuation">..</span>/lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">13</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01atd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/atd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">16</span>:32 K01docker -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/docker*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">18</span> Nov <span class="token number">13</span> <span class="token number">16</span>:32 K01ebtables -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/ebtables*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01irqbalance -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/irqbalance*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">22</span> Sep <span class="token number">14</span> <span class="token number">11</span>:57 K01lvm2-lvmetad -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lvm2-lvmetad*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">14</span> <span class="token number">11</span>:57 K01lvm2-lvmpolld -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lvm2-lvmpolld*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">15</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01lxcfs -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lxcfs*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">13</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01lxd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lxd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">15</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01mdadm -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/mdadm*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">27</span> Nov <span class="token number">13</span> <span class="token number">16</span>:35 K01nfs-kernel-server -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/nfs-kernel-server*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01open-iscsi -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/open-iscsi*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01open-vm-tools -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/open-vm-tools*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">18</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01plymouth -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/plymouth*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 K01postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">11</span>:55 K01resolvconf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/resolvconf*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Dec <span class="token number">14</span> <span class="token number">10</span>:47 K01supervisor -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/supervisor*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">29</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01unattended-upgrades -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/unattended-upgrades*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">17</span> Sep <span class="token number">14</span> <span class="token number">11</span>:55 K01urandom -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/urandom*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">15</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01uuidd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/uuidd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">16</span>:32 K01vsftpd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/vsftpd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">24</span> Sep <span class="token number">14</span> <span class="token number">16</span>:32 K02cgroupfs-mount -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/cgroupfs-mount*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K02iscsid -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/iscsid*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">18</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K03sendsigs -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/sendsigs*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">17</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K04rsyslog -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/rsyslog*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K05hwclock.sh -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/hwclock.sh*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">22</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K05umountnfs.sh -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/umountnfs.sh*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">17</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K06rpcbind -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/rpcbind*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K07networking -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/networking*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">18</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K08umountfs -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/umountfs*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K09cryptdisks -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/cryptdisks*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">26</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K10cryptdisks-early -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/cryptdisks-early*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K11umountroot -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/umountroot*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">24</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K12mdadm-waitidle -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/mdadm-waitidle*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">14</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K13halt -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/halt*-rw-r--r--   <span class="token number">1</span> root root  <span class="token number">353</span> Jan <span class="token number">20</span>  <span class="token number">2016</span> READMEroot@k8s-wolf-minion-47:/etc/rc0.d<span class="token comment"># cd ..</span>root@k8s-wolf-minion-47:/etc<span class="token comment"># ll rc1.d/</span>total <span class="token number">12</span>drwxr-xr-x   <span class="token number">2</span> root root <span class="token number">4096</span> Dec <span class="token number">14</span> <span class="token number">10</span>:47 ./drwxr-xr-x <span class="token number">101</span> root root <span class="token number">4096</span> Feb <span class="token number">22</span> <span class="token number">23</span>:14 <span class="token punctuation">..</span>/lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">13</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01atd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/atd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">16</span>:32 K01docker -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/docker*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">18</span> Nov <span class="token number">13</span> <span class="token number">16</span>:32 K01ebtables -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/ebtables*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01irqbalance -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/irqbalance*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">22</span> Sep <span class="token number">14</span> <span class="token number">11</span>:57 K01lvm2-lvmetad -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lvm2-lvmetad*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">14</span> <span class="token number">11</span>:57 K01lvm2-lvmpolld -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lvm2-lvmpolld*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">15</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01lxcfs -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lxcfs*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">13</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01lxd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/lxd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">15</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01mdadm -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/mdadm*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">27</span> Nov <span class="token number">13</span> <span class="token number">16</span>:35 K01nfs-kernel-server -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/nfs-kernel-server*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01open-iscsi -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/open-iscsi*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01open-vm-tools -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/open-vm-tools*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 K01postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Dec <span class="token number">14</span> <span class="token number">10</span>:47 K01supervisor -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/supervisor*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">13</span> Sep <span class="token number">14</span> <span class="token number">12</span>:02 K01ufw -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/ufw*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">15</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K01uuidd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/uuidd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">16</span>:32 K01vsftpd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/vsftpd*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">24</span> Sep <span class="token number">14</span> <span class="token number">16</span>:32 K02cgroupfs-mount -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/cgroupfs-mount*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K02iscsid -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/iscsid*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">17</span> Sep <span class="token number">14</span> <span class="token number">12</span>:01 K04rsyslog -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/rsyslog*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">17</span> Nov <span class="token number">13</span> <span class="token number">16</span>:34 K06rpcbind -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/rpcbind*-rw-r--r--   <span class="token number">1</span> root root  <span class="token number">369</span> Jan <span class="token number">20</span>  <span class="token number">2016</span> READMElrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">19</span> Sep <span class="token number">14</span> <span class="token number">11</span>:55 S01killprocs -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/killprocs*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">16</span> Sep <span class="token number">14</span> <span class="token number">11</span>:55 S02single -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/single*root@k8s-wolf-minion-47:/etc<span class="token comment"># ll -R rc* | grep postgres</span>lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 K01postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 K01postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 S02postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 S02postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 S02postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 S02postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*lrwxrwxrwx   <span class="token number">1</span> root root   <span class="token number">20</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 K01postgresql -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/postgresql*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:/var/log$ ll <span class="token operator">|</span> <span class="token function">grep</span> -v gztotal <span class="token number">823284</span>drwxrwxr-x <span class="token number">13</span> root   syslog        <span class="token number">4096</span> Feb <span class="token number">21</span> 06:25 ./drwxr-xr-x <span class="token number">14</span> root   root          <span class="token number">4096</span> Sep <span class="token number">14</span> <span class="token number">16</span>:46 <span class="token punctuation">..</span>/-rw-r--r--  <span class="token number">1</span> root   root           <span class="token number">505</span> Feb <span class="token number">10</span> <span class="token number">11</span>:03 alternatives.log-rw-r--r--  <span class="token number">1</span> root   root          <span class="token number">1000</span> Feb  <span class="token number">3</span> <span class="token number">17</span>:23 alternatives.log.1-rw-r--r--  <span class="token number">1</span> root   root        <span class="token number">149090</span> Sep <span class="token number">16</span> <span class="token number">16</span>:13 ansible.logdrwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Feb  <span class="token number">4</span> 06:25 apt/-rw-r-----  <span class="token number">1</span> syslog adm          <span class="token number">49055</span> Feb <span class="token number">22</span> <span class="token number">20</span>:55 auth.log-rw-r-----  <span class="token number">1</span> syslog adm         <span class="token number">224972</span> Feb <span class="token number">21</span> 06:25 auth.log.1-rw-r--r--  <span class="token number">1</span> root   root         <span class="token number">57457</span> Jul <span class="token number">31</span>  <span class="token number">2018</span> bootstrap.log-rw-rw----  <span class="token number">1</span> root   utmp             <span class="token number">0</span> Feb  <span class="token number">1</span> 06:25 btmp-rw-rw----  <span class="token number">1</span> root   utmp             <span class="token number">0</span> Jan  <span class="token number">1</span> 06:25 btmp.1drwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Jan  <span class="token number">5</span> <span class="token number">15</span>:53 containers/drwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Apr  <span class="token number">9</span>  <span class="token number">2018</span> dist-upgrade/-rw-r-----  <span class="token number">1</span> root   adm             <span class="token number">31</span> Jul <span class="token number">31</span>  <span class="token number">2018</span> <span class="token function">dmesg</span>-rw-r--r--  <span class="token number">1</span> root   root         <span class="token number">27128</span> Feb <span class="token number">10</span> <span class="token number">11</span>:03 dpkg.log-rw-r--r--  <span class="token number">1</span> root   root         <span class="token number">23078</span> Feb  <span class="token number">3</span> <span class="token number">17</span>:40 dpkg.log.1-rw-r--r--  <span class="token number">1</span> root   root         <span class="token number">32096</span> Feb <span class="token number">22</span> <span class="token number">17</span>:47 faillogdrwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Sep <span class="token number">14</span> <span class="token number">11</span>:55 fsck/drwxr-xr-x  <span class="token number">3</span> root   root          <span class="token number">4096</span> Sep <span class="token number">14</span> <span class="token number">12</span>:05 installer/-rw-r-----  <span class="token number">1</span> syslog adm              <span class="token number">0</span> Jan <span class="token number">18</span> 06:25 kern.log-rw-r-----  <span class="token number">1</span> syslog adm           <span class="token number">1522</span> Jan <span class="token number">12</span> <span class="token number">11</span>:26 kern.log.1-rw-rw-r--  <span class="token number">1</span> root   utmp        <span class="token number">292876</span> Feb <span class="token number">22</span> <span class="token number">20</span>:40 lastlogdrwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Dec  <span class="token number">8</span>  <span class="token number">2017</span> lxd/drwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Jan  <span class="token number">5</span> <span class="token number">15</span>:53 pods/drwxrwxr-t  <span class="token number">2</span> root   postgres      <span class="token number">4096</span> Jan <span class="token number">31</span> 06:25 postgresql/drwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Dec <span class="token number">14</span> <span class="token number">10</span>:47 supervisor/-rw-r-----  <span class="token number">1</span> syslog adm      <span class="token number">446618132</span> Feb <span class="token number">22</span> <span class="token number">20</span>:59 syslog-rw-r-----  <span class="token number">1</span> syslog adm      <span class="token number">277778484</span> Feb <span class="token number">21</span> 06:25 syslog.1drwxr-xr-x  <span class="token number">2</span> root   root          <span class="token number">4096</span> Dec <span class="token number">11</span>  <span class="token number">2017</span> sysstat/drwxr-x---  <span class="token number">2</span> root   adm           <span class="token number">4096</span> Oct <span class="token number">20</span> <span class="token number">16</span>:28 unattended-upgrades/-rw-rw-r--  <span class="token number">1</span> root   utmp         <span class="token number">38016</span> Feb <span class="token number">22</span> <span class="token number">20</span>:50 wtmp-rw-rw-r--  <span class="token number">1</span> root   utmp         <span class="token number">72576</span> Jan <span class="token number">29</span> <span class="token number">18</span>:09 wtmp.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>syslogd守护进程负责</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s-wolf-minion-47:~<span class="token comment"># ps aux | grep syslogd</span>syslog     <span class="token number">1311</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">256392</span>  <span class="token number">4304</span> ?        Ssl   <span class="token number">2020</span>  <span class="token number">60</span>:28 /usr/sbin/rsyslogd -n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>Openlog </p></li><li><p>closelog</p></li><li><p>Syslog </p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syslog.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FNAME</span> <span class="token string">"/tmp/out"</span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// parent</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ------以下为child------</span>  <span class="token comment">// 重定向stdin, stdout, stderr</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果不产生文件的话, 可以关掉umask</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">openlog</span><span class="token punctuation">(</span><span class="token string">"mydaemon"</span><span class="token punctuation">,</span> LOG_PID<span class="token punctuation">,</span> LOG_DAEMON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">syslog</span><span class="token punctuation">(</span>LOG_ERR<span class="token punctuation">,</span> <span class="token string">"daemonize() failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里不要加\n, syslog自己控制格式</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">syslog</span><span class="token punctuation">(</span>LOG_INFO<span class="token punctuation">,</span> <span class="token string">"daemonize() seccessed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>FNAME<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">syslog</span><span class="token punctuation">(</span>LOG_ERR<span class="token punctuation">,</span> <span class="token string">"fopen:%s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">syslog</span><span class="token punctuation">(</span>LOG_INFO<span class="token punctuation">,</span> <span class="token string">"%s was opened."</span><span class="token punctuation">,</span> FNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">syslog</span><span class="token punctuation">(</span>LOG_DEBUG<span class="token punctuation">,</span> <span class="token string">"%d is printed."</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">closelog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ubuntu@k8s-wolf-minion-47:~$ ./mydaemonubuntu@k8s-wolf-minion-47:~$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> mydaemonubuntu   <span class="token number">143056</span>      <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">22</span>:56 ?        00:00:00 ./mydaemonroot@k8s-wolf-minion-47:~<span class="token comment"># grep 143056 /var/log/syslog</span>Feb <span class="token number">22</span> <span class="token number">22</span>:56:11 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: daemonize<span class="token punctuation">(</span><span class="token punctuation">)</span> seccessed<span class="token operator">!</span>Feb <span class="token number">22</span> <span class="token number">22</span>:56:11 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: /tmp/out was opened.Feb <span class="token number">22</span> <span class="token number">22</span>:56:11 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">0</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:12 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">1</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:13 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">2</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:14 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">3</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:15 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">4</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:16 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">5</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:17 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">6</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:18 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">7</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:19 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">8</span> is printed.Feb <span class="token number">22</span> <span class="token number">22</span>:56:20 k8s-wolf-minion-47 mydaemon<span class="token punctuation">[</span><span class="token number">143056</span><span class="token punctuation">]</span>: <span class="token number">9</span> is printed.root@k8s-wolf-minion-47:~<span class="token comment"># vim /etc/rsyslog.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="通过信号实现并发"><a href="#通过信号实现并发" class="headerlink" title="通过信号实现并发"></a>通过信号实现并发</h2><h3 id="信号的概念"><a href="#信号的概念" class="headerlink" title="信号的概念"></a>信号的概念</h3><h3 id="signal"><a href="#signal" class="headerlink" title="signal()"></a>signal()</h3><h3 id="信号的不可靠"><a href="#信号的不可靠" class="headerlink" title="信号的不可靠"></a>信号的不可靠</h3><h3 id="可重入函数"><a href="#可重入函数" class="headerlink" title="可重入函数"></a>可重入函数</h3><h3 id="信号的想用过程"><a href="#信号的想用过程" class="headerlink" title="信号的想用过程"></a>信号的想用过程</h3><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="kill"><a href="#kill" class="headerlink" title="kill()"></a>kill()</h4><h4 id="Raise"><a href="#Raise" class="headerlink" title="Raise()"></a>Raise()</h4><h4 id="alarm"><a href="#alarm" class="headerlink" title="alarm()"></a>alarm()</h4><h4 id="Pause"><a href="#Pause" class="headerlink" title="Pause()"></a>Pause()</h4><h4 id="Abort"><a href="#Abort" class="headerlink" title="Abort()"></a>Abort()</h4><h4 id="System"><a href="#System" class="headerlink" title="System()"></a>System()</h4><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h4><h3 id="信号集"><a href="#信号集" class="headerlink" title="信号集"></a>信号集</h3><h3 id="信号屏蔽字-pending集的处理"><a href="#信号屏蔽字-pending集的处理" class="headerlink" title="信号屏蔽字/pending集的处理"></a>信号屏蔽字/pending集的处理</h3><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="sigsuspend"><a href="#sigsuspend" class="headerlink" title="sigsuspend()"></a>sigsuspend()</h4><h4 id="sigaction"><a href="#sigaction" class="headerlink" title="sigaction();"></a>sigaction();</h4><h4 id="Settitimer"><a href="#Settitimer" class="headerlink" title="Settitimer();"></a>Settitimer();</h4><h3 id="实时信号"><a href="#实时信号" class="headerlink" title="实时信号"></a>实时信号</h3><h2 id="通过多线程实现并发"><a href="#通过多线程实现并发" class="headerlink" title="通过多线程实现并发"></a>通过多线程实现并发</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://blog.csdn.net/justinzwd/article/details/85206640">CLion工程中只能有一个main函数 &amp;&amp;怎么同时编写多个main函数的C文件</a></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">cmake_minimum_required<span class="token punctuation">(</span>VERSION 3.13<span class="token punctuation">)</span>project<span class="token punctuation">(</span>address C<span class="token punctuation">)</span>set <span class="token punctuation">(</span>CMAKE_C_STANDARD 90<span class="token punctuation">)</span>add_executable<span class="token punctuation">(</span>main01 Chapter-01/1.4.3.c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/u012814984/article/details/44751595">Unix环境编程中的apue.h和err_quit、err_sys问题</a></p><h2 id="1-4-文件和目录"><a href="#1-4-文件和目录" class="headerlink" title="1.4 文件和目录"></a>1.4 文件和目录</h2><ul><li>ls<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../apue.3e/include/apue.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">"error.c"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFSIZE</span> <span class="token expression"><span class="token number">4096</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span>            <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5输入和输出"><a href="#1-5输入和输出" class="headerlink" title="1.5输入和输出"></a>1.5输入和输出</h2><h3 id="有缓冲IO"><a href="#有缓冲IO" class="headerlink" title="有缓冲IO"></a>有缓冲IO</h3></li><li>读输入输出<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../apue.3e/include/apue.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">"error.c"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFSIZE</span> <span class="token expression"><span class="token number">4096</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUFFSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span>            <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重定向: 控制台输入 -&gt; 控制台输出<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  gcc -o a <span class="token number">1.5</span>.3.c ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  ./a<span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">2</span>^C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重定向: 控制台输入 -&gt; 文件输出<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ✘  ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  ./a <span class="token operator">&gt;</span> data<span class="token number">123</span><span class="token number">456</span>^C ✘  ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  <span class="token function">cat</span> data<span class="token number">123</span><span class="token number">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重定向: 文件输入 -&gt; 文件输出<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  <span class="token function">cat</span> <span class="token operator">&gt;</span> infileindata^C ✘  ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  <span class="token function">cat</span> infileindata ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  ./a <span class="token operator">&lt;</span> infile <span class="token operator">&gt;</span> outfile ~/go/src/github.com/sonnary/apue/Chapter-01   master ●  <span class="token function">cat</span> outfileindata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无缓冲IO"><a href="#无缓冲IO" class="headerlink" title="无缓冲IO"></a>无缓冲IO</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../apue.3e/include/apue.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"error.c"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">putc</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>            <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"output error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"input error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6程序和进程"><a href="#1-6程序和进程" class="headerlink" title="1.6程序和进程"></a>1.6程序和进程</h2></li><li>进程ID<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../apue.3e/include/apue.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world from process ID %ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-出错处理"><a href="#1-7-出错处理" class="headerlink" title="1.7 出错处理"></a>1.7 出错处理</h2></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../apue.3e/include/apue.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"EACCES: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>EACCES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errno <span class="token operator">=</span> ENOENT<span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>EACCES<span class="token operator">:</span> Permission denied<span class="token operator">~</span><span class="token operator">/</span>go<span class="token operator">/</span>src<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>sonnary<span class="token operator">/</span>apue<span class="token operator">/</span>cmake<span class="token operator">-</span>build<span class="token operator">-</span>debug<span class="token operator">/</span>main17<span class="token operator">:</span> No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-8-用户标识"><a href="#1-8-用户标识" class="headerlink" title="1.8 用户标识"></a>1.8 用户标识</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uid = %d, gid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>uid <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">,</span> gid <span class="token operator">=</span> <span class="token number">20</span> ✘  <span class="token operator">/</span>etc  cat <span class="token operator">/</span>etc<span class="token operator">/</span>group <span class="token operator">|</span> grep staffstaff<span class="token operator">:</span><span class="token operator">*</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../apue.3e/include/apue.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sig_int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid: %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> sig_int<span class="token punctuation">)</span> <span class="token operator">==</span> SIG_ERR<span class="token punctuation">)</span>        <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"signal error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%% "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">execlp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">err_ret</span><span class="token punctuation">(</span><span class="token string">"couldn't execute: %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">err_sys</span><span class="token punctuation">(</span><span class="token string">"waitpid error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%% "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sig_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"interrupt\n%% "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间值"><a href="#时间值" class="headerlink" title="时间值"></a>时间值</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc  <span class="token function">time</span> <span class="token function">cat</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token number">1</span>zsh: permission denied: <span class="token number">1</span><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token number">1</span>  <span class="token number">0</span>.00s user <span class="token number">0</span>.00s system <span class="token number">58</span>% cpu <span class="token number">0.001</span> total ✘  /etc  <span class="token function">time</span> <span class="token function">rm</span> <span class="token number">1</span>rm: <span class="token number">1</span>: No such <span class="token function">file</span> or directory<span class="token function">rm</span> <span class="token number">1</span>  <span class="token number">0</span>.00s user <span class="token number">0</span>.00s system <span class="token number">64</span>% cpu <span class="token number">0.003</span> total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统调用和库函数"><a href="#系统调用和库函数" class="headerlink" title="系统调用和库函数"></a>系统调用和库函数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> -f <span class="token number">2.5</span>.4.awk用awk转换为c代码, 然后执行该c代码<span class="token punctuation">(</span><span class="token number">2.5</span>.4.c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> unix, c, linux, apue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blod搭建</title>
      <link href="2021/02/16/blog-da-jian/"/>
      <url>2021/02/16/blog-da-jian/</url>
      
        <content type="html"><![CDATA[<p><a href="https://godweiyang.com/2018/04/13/hexo-blog/">https://godweiyang.com/2018/04/13/hexo-blog/</a><br><a href="https://segmentfault.com/a/1190000017986794">https://segmentfault.com/a/1190000017986794</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a><br><a href="https://www.cnblogs.com/shwee/p/11421156.html">https://www.cnblogs.com/shwee/p/11421156.html</a></p><ul><li>按这个配置next主题: <a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></li><li>从这里下载next主题: <a href="https://stackoverflow.com/questions/63405693/hexo-cannot-display-next-theme">https://stackoverflow.com/questions/63405693/hexo-cannot-display-next-theme</a><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/16/hello-world/"/>
      <url>2021/02/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
